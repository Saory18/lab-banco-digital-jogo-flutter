import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:path_provider/path_provider.dart' as path_provider;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final appDocumentDir = await path_provider.getApplicationDocumentsDirectory();
  Hive.init(appDocumentDir.path);
  Hive.registerAdapter(IMCAdapter());
  await Hive.openBox<IMC>('imcBox');
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Calculadora de IMC'),
        ),
        body: IMCCalculator(),
      ),
    );
  }
}

class IMCCalculator extends StatefulWidget {
  @override
  _IMCCalculatorState createState() => _IMCCalculatorState();
}

class _IMCCalculatorState extends State<IMCCalculator> {
  final Box<IMC> imcBox = Hive.box<IMC>('imcBox');
  final TextEditingController nomeController = TextEditingController();
  final TextEditingController pesoController = TextEditingController();
  double altura = 0;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: <Widget>[
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: TextField(
            controller: nomeController,
            decoration: InputDecoration(labelText: 'Nome'),
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: TextField(
            controller: pesoController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(labelText: 'Peso (kg)'),
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text('Altura: $altura m'),
        ),
        ElevatedButton(
          onPressed: () {
            calcularIMC();
          },
          child: Text('Calcular IMC'),
        ),
        Expanded(
          child: ListView.builder(
            itemCount: imcBox.length,
            itemBuilder: (context, index) {
              final imc = imcBox.getAt(index);
              return ListTile(
                title: Text('Nome: ${imc.nome}'),
                subtitle: Text('IMC: ${imc.calcularIMC().toStringAsFixed(2)}'),
              );
            },
          ),
        ),
      ],
    );
  }

  void calcularIMC() {
    final nome = nomeController.text;
    final peso = double.tryParse(pesoController.text) ?? 0;

    if (nome.isNotEmpty && peso > 0 && altura > 0) {
      final imc = IMC(nome, peso, altura);
      imcBox.add(imc);

      setState(() {
        nomeController.clear();
        pesoController.clear();
      });
    }
  }
}

class IMC {
  final String nome;
  final double peso;
  final double altura;

  IMC(this.nome, this.peso, this.altura);

  double calcularIMC() {
    return peso / (altura * altura);
  }
}

@HiveType(typeId: 0)
class IMCAdapter extends TypeAdapter<IMC> {
  @override
  IMC read(BinaryReader reader) {
    return IMC(reader.readString(), reader.readDouble(), reader.readDouble());
  }

  @override
  void write(BinaryWriter writer, IMC obj) {
    writer.writeString(obj.nome);
    writer.writeDouble(obj.peso);
    writer.writeDouble(obj.altura);
  }
}
